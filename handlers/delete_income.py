from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from db.database import delete_last_benefit, get_last_benefit_for_user

router = Router()

class DeleteIncomeFSM(StatesGroup):
    waiting_for_confirmation = State()


@router.message(F.text == "/delete_last_income")
async def start_delete_income(message: Message, state: FSMContext):
    from_user = message.from_user
    try:
        benefit = await get_last_benefit_for_user(from_user.id)
        if not benefit:
            await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –¥–æ—Ö–æ–¥–∞—Ö.")
            return

        await state.update_data(benefit_id=benefit["id"])
        await state.set_state(DeleteIncomeFSM.waiting_for_confirmation)

        amount = benefit["amount"]
        description = benefit["description"] or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        created = benefit["created_at"].strftime("%Y-%m-%d %H:%M")

        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥?\n"
            f"üí∞ {amount} ‚ÇΩ\nüìÑ {description}\nüïí {created}",
            reply_markup=markup
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(DeleteIncomeFSM.waiting_for_confirmation, F.text == "‚úÖ –î–∞")
async def confirm_deletion(message: Message, state: FSMContext):
    data = await state.get_data()
    benefit_id = data.get("benefit_id")

    try:
        deleted = await delete_last_benefit(message.from_user.id)
        if deleted:
            amount = deleted["amount"]
            await message.answer(
                f"‚úÖ –î–æ—Ö–æ–¥ –Ω–∞ {amount} ‚ÇΩ —É–¥–∞–ª—ë–Ω.", reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer("‚ùó –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}", reply_markup=ReplyKeyboardRemove())
    finally:
        await state.clear()


@router.message(DeleteIncomeFSM.waiting_for_confirmation, F.text == "‚ùå –ù–µ—Ç")
async def cancel_deletion(message: Message, state: FSMContext):
    await message.answer("‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
