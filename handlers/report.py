from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
from db import database as db

router = Router()

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
RUS_MONTHS = {
    1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
}


def get_month_selector_keyboard(months_count=6) -> InlineKeyboardMarkup:
    now = datetime.now()
    buttons = []

    for i in range(months_count):
        month_date = (now.replace(day=1) - timedelta(days=30 * i)).replace(day=1)
        text = f"{RUS_MONTHS[month_date.month]} {month_date.year}"
        callback_data = f"report_{month_date.year}_{month_date.month}"
        buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        buttons[i:i + 3] for i in range(0, len(buttons), 3)
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")
    ])
    return keyboard


@router.message(F.text == "/report")
async def cmd_report(message: Message):
    kb = get_month_selector_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=kb)


@router.callback_query(F.data.startswith("report_"))
async def process_report_month(callback: CallbackQuery):
    data = callback.data
    if data == "report_cancel":
        await callback.message.edit_text("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω ‚ùå")
        await callback.answer()
        return

    _, year, month = data.split("_")
    year, month = int(year), int(month)

    telegram_id = callback.from_user.id

    benefits = await db.get_monthly_benefits_full(telegram_id, year, month)
    expenses = await db.get_monthly_expenses_report(telegram_id, year, month)

    lines = [f"üìÖ –û—Ç—á–µ—Ç –∑–∞ {RUS_MONTHS[month]} {year}"]

    if benefits:
        lines.append("\nüí∞ –î–æ—Ö–æ–¥—ã:")
        total_benefit = 0
        for row in benefits:
            dt: datetime = row["created_at"]
            amount = float(row["amount"])
            description = row["description"] or "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            total_benefit += amount
            #lines.append(f"{dt.day:02d}: {amount:.2f} ‚ÇΩ ‚Äî {description}")
            lines.append(f"{dt.day:02d}.{dt.month:02d}: {amount:.2f} ‚ÇΩ ‚Äî {description}")
        lines.append(f"üßæ –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_benefit:.2f} ‚ÇΩ")
    else:
        lines.append("\nüí∞ –î–æ—Ö–æ–¥—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    if expenses:
        lines.append("\nüí∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        total_expense = 0
        for row in expenses:
            cat = row["category_name"]
            amount = float(row["total_amount"])
            total_expense += amount
            lines.append(f"{cat}: {amount:.2f} ‚ÇΩ")
        lines.append(f"üßæ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expense:.2f} ‚ÇΩ")
    else:
        lines.append("\nüí∏ –†–∞—Å—Ö–æ–¥—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    await callback.message.edit_text("\n".join(lines))
    await callback.answer()
